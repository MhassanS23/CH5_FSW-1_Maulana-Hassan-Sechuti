{
  "openapi": "3.0.3",
  "info": {
    "title": "Binar Academy Cars API FSW-1",
    "description": "This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about\nSwagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!\nYou can now help us improve the API whether it's by making changes to the definition itself or to the code.\nThat way, with time, we can improve the API in general, and expose some of the new features in OAS3.\n\n_If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_\n\nSome useful links:\n- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)\n- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "maulanahassan@swagger.io"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.11"
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  },
  "servers": [
    {
      "url": "http://localhost:8000/api/v1"
    }
  ],
  "tags": [
    {
      "name": "superadmin",
      "description": "Everything about superadmin"
    },
    {
      "name": "admin",
      "description": "Everything about admin"
    },
    {
      "name": "cars",
      "description": "Everything about Data Cars"
    },
    {
      "name": "user",
      "description": "Operations about user"
    },
    {
      "name": "whoAmI",
      "description": "Checking role user"
    }
  ],
  "paths": {
    "/superadmin/login": {
      "post": {
        "tags": [
          "superadmin"
        ],
        "summary": "Logs superadmin into the system",
        "description": "",
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "description": "The superadmin email for login",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password for login in clear text",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful login into superadmin account",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Success"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "user": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "integer",
                              "format": "int64",
                              "example": 5
                            },
                            "role": {
                              "type": "string",
                              "example": "Superadmin"
                            },
                            "name": {
                              "type": "string",
                              "example": "Lionel Andres Messi"
                            },
                            "email": {
                              "type": "string",
                              "example": "lionelmessi@gmail.com"
                            },
                            "jwtToken": {
                              "type": "string",
                              "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJwYXlsb2FkIjp7ImlkIjo1LCJuYW1lIjoiTGlvbmVsIEFuZHJlcyBNZXNzaSIsImVtYWlsIjoibGlvbmVsbWVzc2lAZ21haWwuY29tIiwicGFzc3dvcmQiOiIkMmEkMTAkcDdOWUx2REV3R3hvSklyTktWWDlodTFxRDA2TGhSdHZUeFhIWWlCV05QVkUzTmhZSXEvMEsiLCJjcmVhdGVkQXQiOiIyMDIzLTA1LTAxVDA5OjI2OjI0Ljc0NloiLCJ1cGRhdGVkQXQiOiIyMDIzLTA1LTAxVDA5OjI2OjI0Ljc0NloifSwicm9sZSI6IlN1cGVyYWRtaW4iLCJpYXQiOjE2ODMxODY1NTN9.vYFh9QSBIBfYkpaDYaXG3EPaL3AhXKuS7mc4g8sMbd0"
                            },
                            "encryptedPassword": {
                              "type": "string",
                              "example": "$2a$10$p7NYLvDEwGxoJIrNKVX9hu1qD06LhRtvTxXHYiBWNPVE3NhYIq/0K"
                            },
                            "createdAt": {
                              "type": "string",
                              "example": "2023-05-01T09:26:24.746Z"
                            },
                            "updatedAt": {
                              "type": "string",
                              "example": "2023-05-01T09:26:24.746Z"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Invalid email/password supplied",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Failed"
                    },
                    "message": {
                      "type": "string",
                      "example": "Wrong (Email/password),  Superadmin not Found!"
                    },
                    "data": {
                      "type": "string",
                      "example": null
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/superadmin/createAdmin": {
      "post": {
        "tags": [
          "superadmin"
        ],
        "summary": "Create admin users",
        "description": "Make admin to manage cars data",
        "requestBody": {
          "description": "Create a new admin",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Admin"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "If admin successfuly created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Success"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "user": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "integer",
                              "format": "int64",
                              "example": 5
                            },
                            "name": {
                              "type": "string",
                              "example": "david"
                            },
                            "email": {
                              "type": "string",
                              "example": "david@gmail.com"
                            },
                            "password": {
                              "type": "string",
                              "example": "$2a$10$hs0dpmiJimfvg1w/RZgE5eHU8smj73qbdme5zR5chAkUze7J4IAuq"
                            },
                            "createdAt": {
                              "type": "string",
                              "example": "2023-05-04T09:16:08.371Z"
                            },
                            "updatedAt": {
                              "type": "string",
                              "example": "2023-05-04T09:16:08.371Z"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "If Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "If wrong path",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "FAIL"
                    },
                    "message": {
                      "type": "string",
                      "example": "Route not found!"
                    }
                  }
                }
              }
            }
          },
          "405": {
            "description": "Invalid input"
          },
          "422": {
            "description": "If Email has been taken or requestBody not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Failed"
                    },
                    "message": {
                      "type": "string",
                      "example": "Email has been taken !!!"
                    },
                    "data": {
                      "type": "string",
                      "example": null
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/admin/login": {
      "post": {
        "tags": [
          "admin"
        ],
        "summary": "Logs admin into the system",
        "description": "",
        "requestBody": {
          "description": "Login admin to the system",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "ronaldo1@gmail.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "ronaldo123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful login into admin account",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Success"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "user": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "integer",
                              "format": "int64",
                              "example": 4
                            },
                            "role": {
                              "type": "string",
                              "example": "Admin"
                            },
                            "name": {
                              "type": "string",
                              "example": "ronaldo"
                            },
                            "email": {
                              "type": "string",
                              "example": "ronaldo1@gmail.com"
                            },
                            "jwtToken": {
                              "type": "string",
                              "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJwYXlsb2FkIjp7ImlkIjo0LCJuYW1lIjoicm9uYWxkbyIsImVtYWlsIjoicm9uYWxkbzFAZ21haWwuY29tIiwicGFzc3dvcmQiOiIkMmEkMTAkVG1ZaGFNMFR1RVJ2VmRIMHYyN1YzLmdsNVhTMGh0YXdaN1J1SEpCMERJVFhQNWdma2ZmUGkiLCJjcmVhdGVkQXQiOiIyMDIzLTA1LTAyVDAyOjA0OjIwLjIzMFoiLCJ1cGRhdGVkQXQiOiIyMDIzLTA1LTAyVDAyOjA0OjIwLjIzMFoifSwicm9sZSI6IkFkbWluIiwiaWF0IjoxNjgzMTkyNjI2fQ.5nYBUyYSPCnitZeIrNu1kf4LL2hTv7rA2QCAzQfJ3bA"
                            },
                            "password": {
                              "type": "string",
                              "example": "$2a$10$TmYhaM0TuERvVdH0v27V3.gl5XS0htawZ7RuHJB0DITXP5gfkffPi"
                            },
                            "createdAt": {
                              "type": "string",
                              "example": "2023-05-02T02:04:20.230Z"
                            },
                            "updatedAt": {
                              "type": "string",
                              "example": "2023-05-02T02:04:20.230Z"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Invalid email/password supplied",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Failed"
                    },
                    "message": {
                      "type": "string",
                      "example": "Wrong (Email/password),  Admin not Found!"
                    },
                    "data": {
                      "type": "string",
                      "example": null
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "data tidak ditemukan",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Failed"
                    },
                    "message": {
                      "type": "string",
                      "example": "mana ku tahu ni"
                    },
                    "data": {
                      "type": "string",
                      "example": null
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cars": {
      "get": {
        "tags": [
          "cars"
        ],
        "summary": "Get list an existing cars",
        "description": "Get an existing cars where not deleted",
        "responses": {
          "200": {
            "description": "Successful get list cars",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Success"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "cars": {
                          "type": "array",
                          "items": {
                            "properties": {
                              "id": {
                                "type": "integer",
                                "format": "int64",
                                "example": 1
                              },
                              "name": {
                                "type": "string",
                                "example": "LAMBORGHINI"
                              },
                              "price": {
                                "type": "integer",
                                "format": "int64",
                                "example": 650000000
                              },
                              "size": {
                                "type": "string",
                                "example": "Small"
                              },
                              "image": {
                                "type": "string",
                                "example": "cars.jpg"
                              },
                              "delete": {
                                "type": "boolean",
                                "example": false
                              },
                              "created_by": {
                                "type": "string",
                                "example": "lionelmessi@gmail.com"
                              },
                              "updated_by": {
                                "type": "string",
                                "example": "lionelmessi@gmail.com"
                              },
                              "deleted_by": {
                                "type": "string",
                                "example": "lionelmessi@gmail.com"
                              },
                              "createdAt": {
                                "type": "string",
                                "example": "2023-05-03T00:25:45.592Z"
                              },
                              "updatedAt": {
                                "type": "string",
                                "example": "2023-05-03T01:44:42.437Z"
                              }
                            }
                          }
                        }
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "integer",
                          "format": "int64",
                          "example": 1
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "If failed to retrive the data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "FAIL"
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "If Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "If wrong path",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "FAIL"
                    },
                    "message": {
                      "type": "string",
                      "example": "Route not found!"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "cars"
        ],
        "summary": "Add a new cars",
        "description": "Add a new cars to database",
        "requestBody": {
          "description": "Create a new cars in the database",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Cars"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "If data successfuly created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Success, Data Car Created!"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "format": "int64",
                          "example": 1
                        },
                        "name": {
                          "type": "string",
                          "example": "CIVIC"
                        },
                        "price": {
                          "type": "integer",
                          "format": "int64",
                          "example": 450000000
                        },
                        "size": {
                          "type": "string",
                          "example": "Small"
                        },
                        "image": {
                          "type": "string",
                          "example": "cars.jpg"
                        },
                        "delete": {
                          "type": "boolean",
                          "example": false
                        },
                        "created_by": {
                          "type": "string",
                          "example": "lionelmessi@gmail.com"
                        },
                        "updated_by": {
                          "type": "string",
                          "example": null
                        },
                        "deleted_by": {
                          "type": "string",
                          "example": null
                        },
                        "createdAt": {
                          "type": "string",
                          "example": "2023-05-03T00:25:45.592Z"
                        },
                        "updatedAt": {
                          "type": "string",
                          "example": "2023-05-03T01:44:42.437Z"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "If Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "If wrong path",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "FAIL"
                    },
                    "message": {
                      "type": "string",
                      "example": "Route not found!"
                    }
                  }
                }
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/cars/{carsId}": {
      "post": {
        "tags": [
          "cars"
        ],
        "summary": "Updates a cars in the database with form data",
        "description": "",
        "parameters": [
          {
            "name": "carsId",
            "in": "path",
            "description": "ID of cars that needs to be updated",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Name of Cars that needs to be updated",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "price",
            "in": "query",
            "description": "Price of Cars that needs to be updated",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Size of Cars that needs to be updated",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "image",
            "in": "query",
            "description": "Image of Cars that needs to be updated",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "If Successfuly Updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Success, Data Car Updated!"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "If Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "If wrong path",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "FAIL"
                    },
                    "message": {
                      "type": "string",
                      "example": "Route not found!"
                    }
                  }
                }
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "cars"
        ],
        "summary": "Delete data cars in database",
        "description": "delete a cars",
        "parameters": [
          {
            "name": "carsId",
            "in": "path",
            "description": "Cars id to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "If Successfuly Deleted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Success, Data Car Deleted!"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "If Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "If wrong path",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "FAIL"
                    },
                    "message": {
                      "type": "string",
                      "example": "Route not found!"
                    }
                  }
                }
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/users/register": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Register for user",
        "description": "This can only be done by the logged in user.",
        "requestBody": {
          "description": "Created user object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Users"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "If account user registered",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Success"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "user": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "integer",
                              "format": "int64",
                              "example": 1
                            },
                            "name": {
                              "type": "string",
                              "example": "Neymar JR"
                            },
                            "email": {
                              "type": "string",
                              "example": "neymar@gmail.com"
                            },
                            "encryptedPassword": {
                              "type": "string",
                              "example": "$2a$10$Rs.SjP3d6LASY/W1MfNEwOO.iUSdSpXwPlmJQ3/WlQxmHE78AhfEG"
                            },
                            "createdAt": {
                              "type": "string",
                              "example": "2023-05-03T00:25:45.592Z"
                            },
                            "updatedAt": {
                              "type": "string",
                              "example": "2023-05-03T01:44:42.437Z"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "If wrong path",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "FAIL"
                    },
                    "message": {
                      "type": "string",
                      "example": "Route not found!"
                    }
                  }
                }
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/users/login": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Logs user into the system",
        "description": "",
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "description": "The user email for login",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "encryptedPassword",
            "in": "query",
            "description": "The password for login in clear text",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful login into user account",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Success"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "user": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "integer",
                              "format": "int64",
                              "example": 1
                            },
                            "role": {
                              "type": "string",
                              "example": "user"
                            },
                            "name": {
                              "type": "string",
                              "example": "Neymar JR"
                            },
                            "email": {
                              "type": "string",
                              "example": "neymar@gmail.com"
                            },
                            "jwtToken": {
                              "type": "string",
                              "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJwYXlsb2FkIjp7ImlkIjo5LCJuYW1lIjoibGlvbmVsIG1lc3NpIiwiZW1haWwiOiJtZXNzaUBnbWFpbC5jb20iLCJlbmNyeXB0ZWRQYXNzd29yZCI6IiQyYSQxMCRoZWRrL1pQRzZEelRvNk1xLjc4NnkuTVJreXFNREZrbmxHMzU0SEJmWGJvV3BFRHBYOEdjVyIsImNyZWF0ZWRBdCI6IjIwMjMtMDUtMDFUMDc6MTU6MjAuMzU5WiIsInVwZGF0ZWRBdCI6IjIwMjMtMDUtMDFUMDc6MTU6MjAuMzU5WiJ9LCJpYXQiOjE2ODMxODE5Njd9.KtpCT2CTaJKXeZYy3JNjgu5RwLP6sWbZ2E9JBTuQSeo"
                            },
                            "encryptedPassword": {
                              "type": "string",
                              "example": "$2a$10$Rs.SjP3d6LASY/W1MfNEwOO.iUSdSpXwPlmJQ3/WlQxmHE78AhfEG"
                            },
                            "createdAt": {
                              "type": "string",
                              "example": "2023-05-03T00:25:45.592Z"
                            },
                            "updatedAt": {
                              "type": "string",
                              "example": "2023-05-03T01:44:42.437Z"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Invalid email/password supplied",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Failed"
                    },
                    "message": {
                      "type": "string",
                      "example": "Wrong (Email/password), Please Try Again"
                    },
                    "data": {
                      "type": "string",
                      "example": null
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user/createWithList": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Creates list of users with given input array",
        "description": "Creates list of users with given input array",
        "operationId": "createUsersWithListInput",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/logout": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Logs out current logged in user session",
        "description": "",
        "operationId": "logoutUser",
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/{username}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get user by user name",
        "description": "",
        "operationId": "getUserByName",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be fetched. Use user1 for testing. ",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Update user",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "name that need to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Update an existent user in the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete user",
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Order": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "petId": {
            "type": "integer",
            "format": "int64",
            "example": 198772
          },
          "quantity": {
            "type": "integer",
            "format": "int32",
            "example": 7
          },
          "shipDate": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "description": "Order Status",
            "example": "approved",
            "enum": [
              "placed",
              "approved",
              "delivered"
            ]
          },
          "complete": {
            "type": "boolean"
          }
        },
        "xml": {
          "name": "order"
        }
      },
      "Admin": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "David Beckham"
          },
          "email": {
            "type": "string",
            "example": "davidbeckham@gmail.com"
          },
          "password": {
            "type": "string",
            "example": "beckham123"
          }
        },
        "xml": {
          "name": "admin"
        }
      },
      "Address": {
        "type": "object",
        "properties": {
          "street": {
            "type": "string",
            "example": "437 Lytton"
          },
          "city": {
            "type": "string",
            "example": "Palo Alto"
          },
          "state": {
            "type": "string",
            "example": "CA"
          },
          "zip": {
            "type": "string",
            "example": "94301"
          }
        },
        "xml": {
          "name": "address"
        }
      },
      "Category": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "Dogs"
          }
        },
        "xml": {
          "name": "category"
        }
      },
      "Users": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Neymar JR"
          },
          "email": {
            "type": "string",
            "example": "neymar@gmail.com"
          },
          "encryptedPassword": {
            "type": "string",
            "example": "neymar123"
          }
        },
        "xml": {
          "name": "users"
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "username": {
            "type": "string",
            "example": "theUser"
          },
          "firstName": {
            "type": "string",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "example": "James"
          },
          "email": {
            "type": "string",
            "example": "john@email.com"
          },
          "password": {
            "type": "string",
            "example": "12345"
          },
          "phone": {
            "type": "string",
            "example": "12345"
          },
          "userStatus": {
            "type": "integer",
            "description": "User Status",
            "format": "int32",
            "example": 1
          }
        },
        "xml": {
          "name": "user"
        }
      },
      "Tag": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          }
        },
        "xml": {
          "name": "tag"
        }
      },
      "Cars": {
        "required": [
          "name",
          "price",
          "size"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "COROLLA"
          },
          "price": {
            "type": "integer",
            "format": "int64",
            "example": 440000000
          },
          "size": {
            "type": "string",
            "example": "Small"
          },
          "image": {
            "type": "string",
            "example": "cars5.jpg"
          }
        },
        "xml": {
          "name": "cars"
        }
      },
      "Pet": {
        "required": [
          "name",
          "photoUrls"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "name": {
            "type": "string",
            "example": "doggie"
          },
          "category": {
            "$ref": "#/components/schemas/Category"
          },
          "photoUrls": {
            "type": "array",
            "xml": {
              "wrapped": true
            },
            "items": {
              "type": "string",
              "xml": {
                "name": "photoUrl"
              }
            }
          },
          "tags": {
            "type": "array",
            "xml": {
              "wrapped": true
            },
            "items": {
              "$ref": "#/components/schemas/Tag"
            }
          },
          "status": {
            "type": "string",
            "description": "pet status in the store",
            "enum": [
              "available",
              "pending",
              "sold"
            ]
          }
        },
        "xml": {
          "name": "pet"
        }
      },
      "ApiResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        },
        "xml": {
          "name": "##default"
        }
      }
    },
    "requestBodies": {
      "Pet": {
        "description": "Pet object that needs to be added to the store",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Pet"
            }
          },
          "application/xml": {
            "schema": {
              "$ref": "#/components/schemas/Pet"
            }
          }
        }
      },
      "UserArray": {
        "description": "List of user object",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        }
      }
    },
    "securitySchemes": {
      "petstore_auth": {
        "type": "oauth2",
        "flows": {
          "implicit": {
            "authorizationUrl": "https://petstore3.swagger.io/oauth/authorize",
            "scopes": {
              "write:pets": "modify pets in your account",
              "read:pets": "read your pets"
            }
          }
        }
      },
      "api_key": {
        "type": "apiKey",
        "name": "api_key",
        "in": "header"
      },
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}